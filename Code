import speech_recognition as sr
import pyttsx3
import datetime
import wikipedia
import webbrowser
import os
import time
import subprocess
import requests
import wolframalpha

print('Hi Darmick, I am Rai, your personal assistant')

# Initialize text-to-speech engine
engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)

def speak(text):
    engine.say(text)
    engine.runAndWait()

def wishMe():
    hour = datetime.datetime.now().hour
    if hour < 12:
        speak("Hello, Good Morning")
        print("Hello, Good Morning")
    elif hour < 18:
        speak("Hello, Good Afternoon")
        print("Hello, Good Afternoon")
    else:
        speak("Hello, Good Evening")
        print("Hello, Good Evening")

def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        audio = r.listen(source)

        try:
            statement = r.recognize_google(audio, language='en-in')
            print(f"User said: {statement}\n")
        except sr.UnknownValueError:
            speak("Sorry, I did not understand that.")
            return "None"
        except sr.RequestError:
            speak("Sorry, I'm having trouble connecting to the speech recognition service.")
            return "None"
        return statement

def capture_image(filename):
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("Error: Could not open camera.")
            return

        ret, frame = cap.read()
        if ret:
            cv2.imwrite(filename, frame)
            print(f"Image saved as {filename}")
        else:
            print("Error: Could not capture image.")
        cap.release()
    except ImportError:
        print("Error: OpenCV (cv2) is not installed.")
    except Exception as e:
        print(f"An error occurred: {e}")

speak("Loading your AI personal assistant, Here Rai")
wishMe()

if __name__ == '__main__':
    while True:
        speak("Tell me how can I help you now?")
        statement = takeCommand().lower()
        if statement == "none":
            continue

        if "good bye" in statement or "ok bye" in statement or "stop" in statement:
            speak('Your personal assistant Rai is shutting down, Goodbye')
            print('Your personal assistant Rai is shutting down, Goodbye')
            break

        if 'wikipedia' in statement:
            speak('Searching Wikipedia...')
            statement = statement.replace("wikipedia", "")
            results = wikipedia.summary(statement, sentences=3)
            speak("According to Wikipedia")
            print(results)
            speak(results)

        elif 'open youtube' in statement:
            webbrowser.open_new_tab("https://www.youtube.com")
            speak("YouTube is open now")

        elif 'open google' in statement:
            webbrowser.open_new_tab("https://www.google.com")
            speak("Google Chrome is open now")

        elif 'open gmail' in statement:
            webbrowser.open_new_tab("https://mail.google.com")
            speak("Google Mail is open now")

        elif "weather" in statement:
            api_key = "dummy_openweathermap_api_key"  # Dummy API key
            base_url = "https://api.openweathermap.org/data/2.5/weather?"
            speak("What's the city name?")
            city_name = takeCommand()
            complete_url = f"{base_url}appid={api_key}&q={city_name}"
            response = requests.get(complete_url)
            x = response.json()
            if x.get("cod") != "404":
                y = x.get("main", {})
                current_temperature = y.get("temp", "Not available")
                current_humidity = y.get("humidity", "Not available")
                z = x.get("weather", [{}])
                weather_description = z[0].get("description", "Not available")
                speak(f"Temperature in Kelvin unit is {current_temperature}. Humidity in percentage is {current_humidity}. Description is {weather_description}.")
                print(f"Temperature in Kelvin unit = {current_temperature}")
                print(f"Humidity (in percentage) = {current_humidity}")
                print(f"Description = {weather_description}")
            else:
                speak("City Not Found")

        elif 'time' in statement:
            strTime = datetime.datetime.now().strftime("%H:%M:%S")
            speak(f"The time is {strTime}")

        elif 'who are you' in statement or 'what can you do' in statement:
            speak('I am Rai, your personal assistant. I am programmed to perform tasks like opening YouTube, Google Chrome, Gmail, taking photos, searching Wikipedia, predicting weather, and answering computational or geographical questions.')

        elif "who made you" in statement or "who created you" in statement:
            speak("I was built by Mirthula")
            print("I was built by Mirthula")

        elif "open stackoverflow" in statement:
            webbrowser.open_new_tab("https://stackoverflow.com/login")
            speak("Here is Stack Overflow")

        elif 'news' in statement:
            webbrowser.open_new_tab("https://timesofindia.indiatimes.com/home/headlines")
            speak('Here are some headlines from the Times of India. Happy reading')

        elif "camera" in statement or "take a photo" in statement:
            capture_image("img.jpg")

        elif 'search' in statement:
            statement = statement.replace("search", "")
            webbrowser.open_new_tab(statement)

        elif 'ask' in statement:
            speak('I can answer computational and geographical questions. What question do you want to ask now?')
            question = takeCommand()
            app_id = "dummy_wolframalpha_api_key"  # Dummy API key
            client = wolframalpha.Client(app_id)
            try:
                res = client.query(question)
                answer = next(res.results).text
                speak(answer)
                print(answer)
            except Exception as e:
                speak("Sorry, I could not find an answer.")
                print(f"An error occurred: {e}")

        elif "log off" in statement or "sign out" in statement:
            speak("Okay, your PC will log off in 10 seconds. Make sure you exit from all applications.")
            subprocess.call(["osascript", "-e", 'tell app "System Events" to log out'])

